# =================================================================
# TRAEFIK + DOLIBARR - MAKEFILE
# =================================================================

.PHONY: help setup start stop restart logs status health backup restore update clean ssl-check security-check

# Variables
COMPOSE_FILE = docker-compose.integrated.yml
PROJECT_NAME = traefik-dolibarr
BACKUP_DIR = backups
DATE = $(shell date +%Y%m%d_%H%M%S)

# Couleurs pour l'affichage
GREEN = \033[32m
YELLOW = \033[33m
RED = \033[31m
BLUE = \033[34m
NC = \033[0m

# Aide
help: ## üìã Affiche cette aide
	@echo "$(BLUE)=================================================================$(NC)"
	@echo "$(BLUE)  TRAEFIK + DOLIBARR - COMMANDES DISPONIBLES$(NC)"
	@echo "$(BLUE)=================================================================$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)Usage: make <commande>$(NC)"
	@echo ""

# =================================================================
# INSTALLATION ET CONFIGURATION
# =================================================================

setup: ## üöÄ Installation compl√®te interactive
	@echo "$(BLUE)üöÄ Installation de Traefik + Dolibarr...$(NC)"
	@chmod +x setup-traefik.sh
	@./setup-traefik.sh

init-network: ## üåê Cr√©e le r√©seau Docker Traefik
	@echo "$(BLUE)üåê Cr√©ation du r√©seau traefik-network...$(NC)"
	@docker network inspect traefik-network >/dev/null 2>&1 || docker network create traefik-network
	@echo "$(GREEN)‚úÖ R√©seau cr√©√©$(NC)"

generate-env: ## üîß G√©n√®re un fichier .env d'exemple
	@echo "$(BLUE)üîß G√©n√©ration du fichier .env...$(NC)"
	@if [ -f .env ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Le fichier .env existe d√©j√†, sauvegard√© en .env.backup$(NC)"; \
		cp .env .env.backup; \
	fi
	@cp .env.integrated .env
	@echo "$(GREEN)‚úÖ Fichier .env cr√©√©, personnalisez-le avant de d√©marrer$(NC)"

# =================================================================
# GESTION DES SERVICES
# =================================================================

start: init-network ## ‚ñ∂Ô∏è D√©marre tous les services
	@echo "$(BLUE)‚ñ∂Ô∏è  D√©marrage de l'infrastructure...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"
	@make status

stop: ## ‚èπÔ∏è Arr√™te tous les services
	@echo "$(BLUE)‚èπÔ∏è  Arr√™t de l'infrastructure...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s$(NC)"

restart: ## üîÑ Red√©marre tous les services
	@echo "$(BLUE)üîÑ Red√©marrage de l'infrastructure...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) restart
	@echo "$(GREEN)‚úÖ Services red√©marr√©s$(NC)"

pull: ## üì• Met √† jour les images Docker
	@echo "$(BLUE)üì• T√©l√©chargement des derni√®res images...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) pull
	@echo "$(GREEN)‚úÖ Images mises √† jour$(NC)"

# =================================================================
# MONITORING ET LOGS
# =================================================================

status: ## üìä Affiche le statut des services
	@echo "$(BLUE)üìä Statut des services :$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""

logs: ## üìú Affiche les logs en temps r√©el
	@echo "$(BLUE)üìú Logs en temps r√©el (Ctrl+C pour quitter) :$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs -f

logs-traefik: ## üîç Logs Traefik uniquement
	@docker-compose -f $(COMPOSE_FILE) logs -f traefik

logs-dolibarr: ## üîç Logs Dolibarr uniquement
	@docker-compose -f $(COMPOSE_FILE) logs -f dolibarr

logs-access: ## üåê Logs d'acc√®s Traefik
	@tail -f traefik-logs/access.log 2>/dev/null || echo "$(RED)‚ùå Fichier de logs d'acc√®s non trouv√©$(NC)"

logs-errors: ## ‚ö†Ô∏è Filtrage des erreurs dans les logs
	@echo "$(BLUE)‚ö†Ô∏è  Erreurs r√©centes :$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs --tail=100 | grep -i error || echo "$(GREEN)‚úÖ Aucune erreur trouv√©e$(NC)"

health: ## üè• V√©rification de sant√© des services
	@echo "$(BLUE)üè• V√©rification de sant√©...$(NC)"
	@echo ""
	@echo "$(YELLOW)üìä Statut des conteneurs :$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(YELLOW)üåê Tests de connectivit√© :$(NC)"
	@if command -v curl >/dev/null 2>&1; then \
		if [ -f .env ]; then \
			DOLIBARR_DOMAIN=$$(grep DOLIBARR_DOMAIN .env | cut -d'=' -f2); \
			TRAEFIK_DOMAIN=$$(grep TRAEFIK_DOMAIN .env | cut -d'=' -f2); \
			echo "  Dolibarr ($$DOLIBARR_DOMAIN) : $$(curl -s -o /dev/null -w '%{http_code}' --max-time 5 https://$$DOLIBARR_DOMAIN 2>/dev/null || echo 'TIMEOUT')"; \
			echo "  Traefik ($$TRAEFIK_DOMAIN) : $$(curl -s -o /dev/null -w '%{http_code}' --max-time 5 https://$$TRAEFIK_DOMAIN 2>/dev/null || echo 'TIMEOUT')"; \
		else \
			echo "$(RED)‚ùå Fichier .env introuvable$(NC)"; \
		fi; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  curl non install√©, impossible de tester les URLs$(NC)"; \
	fi

# =================================================================
# SAUVEGARDES ET RESTAURATION
# =================================================================

backup: ## üíæ Cr√©e une sauvegarde compl√®te
	@echo "$(BLUE)üíæ Cr√©ation d'une sauvegarde...$(NC)"
	@mkdir -p $(BACKUP_DIR)
	@echo "$(YELLOW)üì¶ Sauvegarde des donn√©es...$(NC)"
	@tar -czf "$(BACKUP_DIR)/backup_$(DATE).tar.gz" \
		data/ \
		traefik-data/ \
		traefik-config/ \
		.env \
		$(COMPOSE_FILE) \
		2>/dev/null || true
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e : $(BACKUP_DIR)/backup_$(DATE).tar.gz$(NC)"
	@ls -lh $(BACKUP_DIR)/backup_$(DATE).tar.gz

backup-quick: ## ‚ö° Sauvegarde rapide (donn√©es uniquement)
	@echo "$(BLUE)‚ö° Sauvegarde rapide...$(NC)"
	@mkdir -p $(BACKUP_DIR)
	@tar -czf "$(BACKUP_DIR)/backup_quick_$(DATE).tar.gz" data/ .env 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Sauvegarde rapide cr√©√©e$(NC)"

list-backups: ## üìã Liste les sauvegardes disponibles
	@echo "$(BLUE)üìã Sauvegardes disponibles :$(NC)"
	@ls -lht $(BACKUP_DIR)/ 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Aucune sauvegarde trouv√©e$(NC)"

restore: ## üîÑ Restaure depuis une sauvegarde
	@echo "$(BLUE)üîÑ Restauration depuis une sauvegarde...$(NC)"
	@if [ -z "$(BACKUP)" ]; then \
		echo "$(RED)‚ùå Sp√©cifiez le fichier : make restore BACKUP=backup_file.tar.gz$(NC)"; \
		echo "$(YELLOW)üìã Sauvegardes disponibles :$(NC)"; \
		ls $(BACKUP_DIR)/ 2>/dev/null || echo "Aucune sauvegarde"; \
		exit 1; \
	fi
	@if [ ! -f "$(BACKUP_DIR)/$(BACKUP)" ]; then \
		echo "$(RED)‚ùå Fichier $(BACKUP_DIR)/$(BACKUP) non trouv√©$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)‚ö†Ô∏è  Arr√™t des services...$(NC)"
	@make stop
	@echo "$(YELLOW)üì¶ Extraction de la sauvegarde...$(NC)"
	@tar -xzf "$(BACKUP_DIR)/$(BACKUP)"
	@echo "$(YELLOW)‚ñ∂Ô∏è  Red√©marrage des services...$(NC)"
	@make start
	@echo "$(GREEN)‚úÖ Restauration termin√©e$(NC)"

# =================================================================
# MISES √Ä JOUR ET MAINTENANCE
# =================================================================

update: backup ## üîÑ Met √† jour l'infrastructure (avec sauvegarde)
	@echo "$(BLUE)üîÑ Mise √† jour de l'infrastructure...$(NC)"
	@echo "$(YELLOW)1. Sauvegarde pr√©ventive...$(NC)"
	@make backup-quick
	@echo "$(YELLOW)2. T√©l√©chargement des nouvelles images...$(NC)"
	@make pull
	@echo "$(YELLOW)3. Red√©marrage avec nouvelles images...$(NC)"
	@make restart
	@echo "$(YELLOW)4. V√©rification...$(NC)"
	@sleep 10
	@make health
	@echo "$(GREEN)‚úÖ Mise √† jour termin√©e$(NC)"

update-dolibarr: ## üîÑ Met √† jour Dolibarr uniquement
	@echo "$(BLUE)üîÑ Mise √† jour de Dolibarr...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Suppression du verrou d'installation...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec dolibarr rm -f /var/www/documents/install.lock || true
	@docker-compose -f $(COMPOSE_FILE) pull dolibarr
	@docker-compose -f $(COMPOSE_FILE) up -d dolibarr
	@echo "$(GREEN)‚úÖ Dolibarr mis √† jour$(NC)"
	@echo "$(BLUE)‚ÑπÔ∏è  Visitez votre Dolibarr pour finaliser la mise √† jour$(NC)"

clean: ## üßπ Nettoie les ressources Docker
	@echo "$(BLUE)üßπ Nettoyage des ressources...$(NC)"
	@docker system prune -f
	@docker volume prune -f
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-logs: ## üóëÔ∏è Nettoie les logs anciens
	@echo "$(BLUE)üóëÔ∏è  Nettoyage des logs...$(NC)"
	@find traefik-logs/ -name "*.log" -type f -mtime +30 -delete 2>/dev/null || true
	@find $(BACKUP_DIR)/ -name "backup_*.tar.gz" -type f -mtime +90 -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Logs nettoy√©s$(NC)"

# =================================================================
# S√âCURIT√â ET TESTS
# =================================================================

ssl-check: ## üîí V√©rifie les certificats SSL
	@echo "$(BLUE)üîí V√©rification des certificats SSL...$(NC)"
	@if [ -f .env ]; then \
		DOLIBARR_DOMAIN=$$(grep DOLIBARR_DOMAIN .env | cut -d'=' -f2); \
		TRAEFIK_DOMAIN=$$(grep TRAEFIK_DOMAIN .env | cut -d'=' -f2); \
		echo "$(YELLOW)üìã Certificats Dolibarr ($$DOLIBARR_DOMAIN) :$(NC)"; \
		openssl s_client -connect $$DOLIBARR_DOMAIN:443 -servername $$DOLIBARR_DOMAIN </dev/null 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || echo "$(RED)‚ùå Erreur de certificat$(NC)"; \
		echo "$(YELLOW)üìã Certificats Traefik ($$TRAEFIK_DOMAIN) :$(NC)"; \
		openssl s_client -connect $$TRAEFIK_DOMAIN:443 -servername $$TRAEFIK_DOMAIN </dev/null 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || echo "$(RED)‚ùå Erreur de certificat$(NC)"; \
	else \
		echo "$(RED)‚ùå Fichier .env introuvable$(NC)"; \
	fi

security-check: ## üõ°Ô∏è Audit de s√©curit√©
	@echo "$(BLUE)üõ°Ô∏è  Audit de s√©curit√©...$(NC)"
	@echo ""
	@echo "$(YELLOW)üîç V√©rification des permissions fichiers :$(NC)"
	@ls -la .env 2>/dev/null | awk '{print "  .env: " $$1}' || echo "$(RED)‚ùå .env non trouv√©$(NC)"
	@ls -ld traefik-data/letsencrypt/ 2>/dev/null | awk '{print "  letsencrypt/: " $$1}' || echo "$(RED)‚ùå dossier letsencrypt non trouv√©$(NC)"
	@echo ""
	@echo "$(YELLOW)üîç V√©rification des conteneurs :$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
	@echo ""
	@echo "$(YELLOW)üîç V√©rification r√©seau :$(NC)"
	@docker network ls | grep traefik-network && echo "$(GREEN)‚úÖ R√©seau traefik-network OK$(NC)" || echo "$(RED)‚ùå R√©seau traefik-network manquant$(NC)"

test-connectivity: ## üåê Test de connectivit√© complet
	@echo "$(BLUE)üåê Test de connectivit√©...$(NC)"
	@if [ -f .env ]; then \
		DOLIBARR_DOMAIN=$$(grep DOLIBARR_DOMAIN .env | cut -d'=' -f2); \
		TRAEFIK_DOMAIN=$$(grep TRAEFIK_DOMAIN .env | cut -d'=' -f2); \
		echo "$(YELLOW)üîç Test DNS :$(NC)"; \
		nslookup $$DOLIBARR_DOMAIN >/dev/null 2>&1 && echo "  $$DOLIBARR_DOMAIN: $(GREEN)‚úÖ OK$(NC)" || echo "  $$DOLIBARR_DOMAIN: $(RED)‚ùå FAIL$(NC)"; \
		nslookup $$TRAEFIK_DOMAIN >/dev/null 2>&1 && echo "  $$TRAEFIK_DOMAIN: $(GREEN)‚úÖ OK$(NC)" || echo "  $$TRAEFIK_DOMAIN: $(RED)‚ùå FAIL$(NC)"; \
		echo "$(YELLOW)üîç Test HTTP :$(NC)"; \
		curl -s -o /dev/null -w "  $$DOLIBARR_DOMAIN: %{http_code} (%{time_total}s)\n" --max-time 10 https://$$DOLIBARR_DOMAIN 2>/dev/null || echo "  $$DOLIBARR_DOMAIN: $(RED)‚ùå TIMEOUT$(NC)"; \
		curl -s -o /dev/null -w "  $$TRAEFIK_DOMAIN: %{http_code} (%{time_total}s)\n" --max-time 10 https://$$TRAEFIK_DOMAIN 2>/dev/null || echo "  $$TRAEFIK_DOMAIN: $(RED)‚ùå TIMEOUT$(NC)"; \
	else \
		echo "$(RED)‚ùå Fichier .env introuvable$(NC)"; \
	fi

# =================================================================
# UTILITAIRES
# =================================================================

shell-traefik: ## üêö Ouvre un shell dans le conteneur Traefik
	@docker-compose -f $(COMPOSE_FILE) exec traefik sh

shell-dolibarr: ## üêö Ouvre un shell dans le conteneur Dolibarr
	@docker-compose -f $(COMPOSE_FILE) exec dolibarr bash

config: ## ‚öôÔ∏è Affiche la configuration active
	@echo "$(BLUE)‚öôÔ∏è  Configuration Docker Compose :$(NC)"
	@docker-compose -f $(COMPOSE_FILE) config

env-check: ## üîç V√©rifie le fichier .env
	@echo "$(BLUE)üîç V√©rification du fichier .env...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(RED)‚ùå Fichier .env manquant !$(NC)"; \
		echo "$(YELLOW)üí° Utilisez: make generate-env$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Fichier .env pr√©sent$(NC)"
	@echo ""
	@echo "$(YELLOW)üìã Variables principales :$(NC)"
	@grep -E "^(TRAEFIK_DOMAIN|DOLIBARR_DOMAIN|ACME_EMAIL)" .env | sed 's/=.*/=***/' || echo "$(YELLOW)‚ö†Ô∏è  Variables manquantes$(NC)"

stats: ## üìä Statistiques d'utilisation
	@echo "$(BLUE)üìä Statistiques d'utilisation :$(NC)"
	@echo ""
	@echo "$(YELLOW)üíæ Espace disque :$(NC)"
	@du -sh data/ traefik-data/ $(BACKUP_DIR)/ 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Certains dossiers n'existent pas encore$(NC)"
	@echo ""
	@echo "$(YELLOW)üê≥ Images Docker :$(NC)"
	@docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep -E "(traefik|dolibarr)" || echo "$(YELLOW)‚ö†Ô∏è  Aucune image trouv√©e$(NC)"
	@echo ""
	@echo "$(YELLOW)üìà Utilisation ressources :$(NC)"
	@docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Aucun conteneur en cours$(NC)"

# =================================================================
# D√âVELOPPEMENT
# =================================================================

dev-reset: ## üîÑ Reset complet pour d√©veloppement
	@echo "$(BLUE)üîÑ Reset pour d√©veloppement...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  ATTENTION: Cette action va supprimer toutes les donn√©es !$(NC)"
	@read -p "√ätes-vous s√ªr ? (tapez 'yes'): " confirm && [ "$$confirm" = "yes" ] || exit 1
	@make stop
	@docker-compose -f $(COMPOSE_FILE) down -v
	@rm -rf data/ traefik-data/ traefik-logs/
	@echo "$(GREEN)‚úÖ Reset termin√©$(NC)"

monitor: ## üìä Monitoring en temps r√©el
	@echo "$(BLUE)üìä Monitoring en temps r√©el (Ctrl+C pour quitter)...$(NC)"
	@watch -n 2 'echo "=== CONTAINERS ===" && docker-compose -f $(COMPOSE_FILE) ps && echo "" && echo "=== STATS ===" && docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"'